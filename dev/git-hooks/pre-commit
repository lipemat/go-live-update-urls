#!/bin/bash

#####################################################################################
#
# Test our code against various unit test systems and linters and prevent commit
# if any of them fail.
#
# @notice Customized to support multiple versions of PHP is same runs.
#
# @see /dev/git-hooks.sh for installation as symbolic link
#
# @version 5.3.0

JEST_CONFIG="jest/jest.config.ts"
LEGACY_PHP_VERSION="7.0"
PHP_VERSION="8.1"
PHPUNIT_DIR="../go-live-update-urls-pro/dev/wp-unit"

#####################################################################################

GREEN="$(tput setaf 2)"
WHITE="$(tput setaf 7)"
YELLOW="$(tput setaf 3)"
RED="$(tput setaf 1)"
BLUE="$(tput setaf 6)"
RESET_COLOR="$(tput sgr0)"

# Point to specific version of PHP if supported via environmental variables.
if [[ "true" == "$PHP_MULTI_VERSION_SUPPORT" ]]; then
    PHP="php ${PHP_VERSION}"
    PHPCS="phpcs ${PHP_VERSION}"
    PHPSTAN="phpstan ${PHP_VERSION}"
    PHPUNIT="phpunit ${PHP_VERSION}"
else
    PHP='php'
    PHPCS='phpcs'
    PHPSTAN='phpstan'
    PHPUNIT='phpunit'
fi
PROJECT=$(${PHP} -r "echo dirname(realpath('$0'), 3);")
## Fix windows paths
PROJECT=${PROJECT//\\//}

JS_FILES=$(git diff-index --cached --name-only "HEAD@{1}" | grep "\.js$\|\.jsx$\|\.ts$\|\.tsx$")
PHP_FILES=$(git diff-index --cached --name-only --diff-filter=ACMR HEAD | grep \\.php)

if [[ ! "$PHP_FILES" ]]; then
    echo "${YELLOW}[pre-commit]${BLUE} No Lintable PHP Files Changed ${RESET_COLOR}"
fi
if [[ ! "$JS_FILES" ]]; then
    echo "${YELLOW}[pre-commit]${BLUE} No JS Files Changed ${RESET_COLOR}"
fi


function exit_reset_colors() {
	echo ${RESET_COLOR}
	exit 1
}

# Must run them consecutively to prevent conflicts.
function php_units() {
	php_unit "phpunit ${LEGACY_PHP_VERSION}" 'phpunit-legacy.xml.dist'
	php_unit "phpunit ${LEGACY_PHP_VERSION}" 'phpunit.xml.dist'
	php_unit "phpunit ${PHP_VERSION}" 'phpunit.xml.dist'
}

function php_unit() {
        if [[ ! -f ${PROJECT}/${PHPUNIT_DIR}/phpunit.xml ]] && [[ ! -f ${PROJECT}/${PHPUNIT_DIR}/phpunit.xml.dist ]]; then
            echo "${YELLOW}[pre-commit]${RED} ${PROJECT}/${PHPUNIT_DIR}/phpunit.xml or ${PROJECT}/${PHPUNIT_DIR}/phpunit.xml.dist not found!"
            exit_reset_colors
        fi
        echo "${YELLOW}[pre-commit]${BLUE} Running ${1^^} ${2}... ${WHITE}"
        OUTPUT=$(${1} --configuration ${PROJECT}/${PHPUNIT_DIR}/${2})
        if [[ $? != 0 ]]; then
            echo
            echo "${BLUE}${1^^} ${2} Failed! Fix the error before commit!"
            echo "${RED}$OUTPUT"
            exit_reset_colors
        fi
        echo "${YELLOW}[pre-commit]${GREEN} ${1^^} ${2} Tests Passed!${RESET_COLOR}"
}
php_units &

function php_lint() {
    if [[ "$PHP_FILES" ]]; then
        echo "${YELLOW}[pre-commit]${BLUE} Checking ${1^^}... ${WHITE}"
        for FILE in ${PHP_FILES}; do
            OUTPUT=$(${1} -l -d display_errors=0 ${PROJECT}/${FILE})
            if [[ $? != 0 ]]; then
                echo
                echo "${BLUE}${1^^} Failed. Fix the error before commit."
                echo "${RED}$OUTPUT"
                exit_reset_colors
            fi
        done
        echo "${YELLOW}[pre-commit]${GREEN} ${1^^} Lint Passed!${RESET_COLOR}"
    fi
}
php_lint "php ${LEGACY_PHP_VERSION}" &
php_lint "php ${PHP_VERSION}" &

function php_code_sniffer() {
    if [[ "$PHP_FILES" || "$JS_FILES" ]]; then
        if [[ ! -f ${PROJECT}/phpcs.xml ]] && [[ ! -f ${PROJECT}/phpcs.xml.dist ]]; then
            echo "${YELLOW}[pre-commit]${RED} ${PROJECT}/phpcs.xml or ${PROJECT}/phpcs.xml.dist not found!"
            exit_reset_colors
        fi
        for FILE in ${PHP_FILES}; do
            FILES="$FILES ${PROJECT}/${FILE}"
        done
        echo "${YELLOW}[pre-commit]${BLUE} Running PHPCS... ${WHITE}"
        OUTPUT=$(${PHPCS} --encoding=utf-8 -s -p)
        if [[ $? != 0 ]]; then
            echo
            echo "${BLUE}PHPCS failed. Fix the error before commit!"
            echo "${RED}$OUTPUT"
            echo
            echo "${YELLOW}For automatic fixes run"
            echo
            echo "${WHITE}phpcbf${FILES}"
            echo
            exit_reset_colors
        fi
        echo "${YELLOW}[pre-commit]${GREEN} PHPCS Passed!${RESET_COLOR}"
    fi
}
php_code_sniffer &

function php_stan() {
        echo "${YELLOW}[pre-commit]${BLUE} Running ${1^}... ${WHITE}"
        OUTPUT=$(${1} analyse --no-progress --memory-limit=2G)
        if [[ $? != 0 ]]; then
            echo
            echo "${BLUE}${1^^} Failed. Fix the error before commit."
            echo "${RED}$OUTPUT"
            exit_reset_colors
        fi
        echo "${YELLOW}[pre-commit]${GREEN} ${1^} Passed!${RESET_COLOR}"
}
php_stan "${PHPSTAN}" &
php_stan 'E:/SVN/wordpress-legacy/phpstan-legacy' &

function js_tests() {
    if [[ "$JS_FILES" ]]; then
    	if [[ ! -f "${PROJECT}/js/${JEST_CONFIG}" ]]; then
            echo "${YELLOW}[pre-commit]${BLUE} Skipping JS tests (non-existent).${RESET_COLOR}"
            return
        fi
        echo "${YELLOW}[pre-commit]${BLUE} Running JS Tests... ${WHITE}"
        cd "${PROJECT}/js" || exit
        OUTPUT=$(yarn run test --bail 2>&1)
        if [[ $? != 0 ]]; then
            echo
            echo "${BLUE}JS Tests failed. Fix the error before commit!"
            echo "${RED}$OUTPUT"
            exit_reset_colors
        fi
        echo "${YELLOW}[pre-commit]${GREEN} JS Tests Passed!${RESET_COLOR}"
    fi
}
js_tests &

# Go through each background task
# If it sent exit code 1, it failed and the result from `wait` will be false.
FAIL=0
for job in $(jobs -p); do
    wait "$job" || (( FAIL+=1 ))
done

echo "${RESET_COLOR}"

# If any of the background tasks failed, we exit 1
if [[ $FAIL -ne 0 ]]; then
    exit 1
else
    exit 0
fi
