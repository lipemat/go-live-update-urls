#!/bin/sh

#######################################################################################
#
# This script is setup for PHP 5.4, 5.6 and PHP 7.3
#
#######################################################################################
PROJECT="."

## Fix windows paths
PROJECT=${PROJECT//\\//}

STAGED_FILES_CMD=`git diff --cached --name-only --diff-filter=ACMR HEAD | grep \\\\.php`

# Check for phpcs config
if [[ ! -f ${PROJECT}/phpcs.xml ]] && [[ ! -f ${PROJECT}/phpcs.xml.dist ]]; then
  echo "${PROJECT}/phpcs.xml or ${PROJECT}/phpcs.xml.dist not found!"
  exit 1;
fi

# Run phpunit (PHP5).
## Use SSH script instead of a PHP call so no $PHP
echo "Running PHP Unit (PHP5.6)."
phpunit 5.6 --configuration ../go-live-update-urls-pro/dev/wp-unit/phpunit.xml
if [[ $? != 0 ]]; then
  echo "Fix the error before commit!"
  exit 1
fi

# Run phpunit (PHP7).
echo "Running PHP Unit (PHP7) multi."
phpunit 7.3 --configuration ../go-live-update-urls-pro/dev/wp-unit/phpunit.xml
if [[ $? != 0 ]]; then
  echo "Fix the error before commit!"
  exit 1
fi

# Run phpunit (PHP7).
echo "Running PHP Unit (PHP7) single."
phpunit 7.3 --configuration ../go-live-update-urls-pro/dev/wp-unit/phpunit-single.xml
if [[ $? != 0 ]]; then
  echo "Fix the error before commit!"
  exit 1
fi


# Determine if a file list is passed.
if [[ "$#" -eq 1 ]]; then
  oIFS=$IFS
  IFS='
  '
  SFILES="$1"
  IFS=${oIFS}
fi
SFILES=${SFILES:-$STAGED_FILES_CMD}

# Run php lint (PHP5).
echo "Checking PHP5.4 Lint..."
for FILE in ${SFILES}; do
  php 5.4 -l -d display_errors=0 ${PROJECT}/${FILE}
  if [[ $? != 0 ]]; then
    echo "Fix the error before commit."
    exit 1
  fi
  FILES="${FILES} ${PROJECT}/${FILE}"
done

# Run php lint (PHP7).
echo "Checking PHP7 Lint..."
for FILE in ${SFILES}; do
  php 7.3 -l -d display_errors=0 ${PROJECT}/${FILE}
  if [[ $? != 0 ]]; then
    echo "Fix the error before commit."
    exit 1
  fi
  FILES="${FILES} ${PROJECT}/${FILE}"
done

# Run phpcs.
if [[ "${FILES}" != "" ]]; then
  echo "Running Code Sniffer..."
  phpcs --encoding=utf-8 -s -n -p ${FILES}
  if [[ $? != 0 ]]; then
    echo "Fix the error before commit!"
    echo "Run"
    echo "  phpcbf ${FILES}"
    echo "for automatic fix or fix it manually."
    exit 1
  fi
fi

exit $?
